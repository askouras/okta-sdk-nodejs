"use strict";
/**
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * The version of the OpenAPI document: 2.7.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyRuleConditions = void 0;
var PolicyRuleConditions = /** @class */ (function () {
    function PolicyRuleConditions() {
    }
    PolicyRuleConditions.getAttributeTypeMap = function () {
        return PolicyRuleConditions.attributeTypeMap;
    };
    PolicyRuleConditions.discriminator = undefined;
    PolicyRuleConditions.attributeTypeMap = [
        {
            "name": "app",
            "baseName": "app",
            "type": "AppAndInstancePolicyRuleCondition"
        },
        {
            "name": "apps",
            "baseName": "apps",
            "type": "AppInstancePolicyRuleCondition"
        },
        {
            "name": "authContext",
            "baseName": "authContext",
            "type": "PolicyRuleAuthContextCondition"
        },
        {
            "name": "authProvider",
            "baseName": "authProvider",
            "type": "PasswordPolicyAuthenticationProviderCondition"
        },
        {
            "name": "beforeScheduledAction",
            "baseName": "beforeScheduledAction",
            "type": "BeforeScheduledActionPolicyRuleCondition"
        },
        {
            "name": "clients",
            "baseName": "clients",
            "type": "ClientPolicyCondition"
        },
        {
            "name": "context",
            "baseName": "context",
            "type": "ContextPolicyRuleCondition"
        },
        {
            "name": "device",
            "baseName": "device",
            "type": "DevicePolicyRuleCondition"
        },
        {
            "name": "grantTypes",
            "baseName": "grantTypes",
            "type": "GrantTypePolicyRuleCondition"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "GroupPolicyRuleCondition"
        },
        {
            "name": "identityProvider",
            "baseName": "identityProvider",
            "type": "IdentityProviderPolicyRuleCondition"
        },
        {
            "name": "mdmEnrollment",
            "baseName": "mdmEnrollment",
            "type": "MDMEnrollmentPolicyRuleCondition"
        },
        {
            "name": "network",
            "baseName": "network",
            "type": "PolicyNetworkCondition"
        },
        {
            "name": "people",
            "baseName": "people",
            "type": "PolicyPeopleCondition"
        },
        {
            "name": "platform",
            "baseName": "platform",
            "type": "PlatformPolicyRuleCondition"
        },
        {
            "name": "risk",
            "baseName": "risk",
            "type": "RiskPolicyRuleCondition"
        },
        {
            "name": "riskScore",
            "baseName": "riskScore",
            "type": "RiskScorePolicyRuleCondition"
        },
        {
            "name": "scopes",
            "baseName": "scopes",
            "type": "OAuth2ScopesMediationPolicyRuleCondition"
        },
        {
            "name": "userIdentifier",
            "baseName": "userIdentifier",
            "type": "UserIdentifierPolicyRuleCondition"
        },
        {
            "name": "userStatus",
            "baseName": "userStatus",
            "type": "UserStatusPolicyRuleCondition"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "UserPolicyRuleCondition"
        }
    ];
    return PolicyRuleConditions;
}());
exports.PolicyRuleConditions = PolicyRuleConditions;
