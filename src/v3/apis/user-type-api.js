'use strict';
/* tslint:disable */
/* eslint-disable */
/**
 * Copyright (c) 2022-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.10.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.UserTypeApi = exports.UserTypeApiFactory = exports.UserTypeApiFp = exports.UserTypeApiRequestParamCreator = void 0;
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
var models_1 = require("../models");
var oauth_1 = require("../../oauth");
var http_1 = require("../../http");
var config_loader_1 = require("../../config-loader");
var default_request_executor_1 = require("../../default-request-executor");
var model_factory_1 = require("../../model-factory");
var collection_1 = require("../../collection");
var os = require('os');
var packageJson = require('../../../package.json');
var DEFAULT_USER_AGENT = packageJson.name + "/" + packageJson.version + " node/" + process.versions.node + " " + os.platform() + "/" + os.release();
var repoUrl = 'https://github.com/okta/okta-sdk-nodejs';
/**
 * UserTypeApi - request parameter creator
 * @export
 */
var UserTypeApiRequestParamCreator = function (configuration) {
    var configLoader = new config_loader_1.ConfigLoader();
    var clientConfig = Object.assign({}, configuration);
    configLoader.applyDefaults();
    configLoader.apply({
        client: clientConfig || {}
    });
    var parsedConfig = configLoader.config;
    var requestExecutor = clientConfig.requestExecutor || new default_request_executor_1.DefaultRequestExecutor();
    var errors = [];
    if (!parsedConfig.client.orgUrl) {
        errors.push('Okta Org URL not provided');
    }
    if (!parsedConfig.client.token && parsedConfig.client.authorizationMode !== 'PrivateKey') {
        errors.push('Okta API token not provided');
    }
    if (parsedConfig.client.authorizationMode === 'PrivateKey') {
        if (!parsedConfig.client.clientId) {
            errors.push('Okta Client ID not provided');
        }
        if (!parsedConfig.client.scopes) {
            errors.push('Scopes not provided');
        }
        if (!parsedConfig.client.privateKey) {
            errors.push('Private Key not provided');
        }
    }
    else if (parsedConfig.client.authorizationMode !== 'SSWS') {
        errors.push('Unknown Authorization Mode');
    }
    if (errors.length) {
        throw new Error("Found " + errors.length + " errors:\n" + errors.join('\n') + "\nSee " + repoUrl + " for usage.");
    }
    var authorizationMode = parsedConfig.client.authorizationMode;
    var baseUrl = parsedConfig.client.orgUrl.replace(/\/$/, '');
    var apiToken = parsedConfig.client.token;
    var clientId;
    var scopes;
    var privateKey;
    var oauth;
    if (authorizationMode === 'PrivateKey') {
        clientId = parsedConfig.client.clientId;
        scopes = parsedConfig.client.scopes.split(' ');
        privateKey = parsedConfig.client.privateKey;
        oauth = new oauth_1.OAuth(this);
    }
    var http = new http_1.Http({
        cacheStore: clientConfig.cacheStore,
        cacheMiddleware: clientConfig.cacheMiddleware,
        defaultCacheMiddlewareResponseBufferSize: clientConfig.defaultCacheMiddlewareResponseBufferSize,
        requestExecutor: requestExecutor,
        oauth: oauth
    });
    if (authorizationMode === 'SSWS') {
        http.defaultHeaders.Authorization = "SSWS " + apiToken;
    }
    http.defaultHeaders['User-Agent'] = parsedConfig.client.userAgent ? parsedConfig.client.userAgent + ' ' + DEFAULT_USER_AGENT : DEFAULT_USER_AGENT;
    return {
        http: http,
        /**
          * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
          * @summary Create User Type
          * @param {UserType} body
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        createUserType: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createUserType.');
            }
            var localVarPath = "/api/v1/meta/types/user";
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var localVarUrlObj = new URL(localVarPath, 'https://example.com');
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                var localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            var query = new URLSearchParams(localVarUrlObj.search);
            for (var key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (var key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions
            };
        },
        /**
          * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
          * @summary Delete User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        deleteUserType: function (typeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling deleteUserType.');
            }
            var localVarPath = "/api/v1/meta/types/user/{typeId}"
                .replace("{" + "typeId" + "}", encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var localVarUrlObj = new URL(localVarPath, 'https://example.com');
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                var localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            var query = new URLSearchParams(localVarUrlObj.search);
            for (var key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (var key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions
            };
        },
        /**
          * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
          * @summary Get User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        getUserType: function (typeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling getUserType.');
            }
            var localVarPath = "/api/v1/meta/types/user/{typeId}"
                .replace("{" + "typeId" + "}", encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var localVarUrlObj = new URL(localVarPath, 'https://example.com');
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                var localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            var query = new URLSearchParams(localVarUrlObj.search);
            for (var key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (var key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions
            };
        },
        /**
          * Fetches all User Types in your org
          * @summary List User Types
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        listUserTypes: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/meta/types/user";
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var localVarUrlObj = new URL(localVarPath, 'https://example.com');
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                var localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            var query = new URLSearchParams(localVarUrlObj.search);
            for (var key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (var key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions
            };
        },
        /**
          * Replace an existing User Type
          * @summary Replace User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        replaceUserType: function (body, typeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling replaceUserType.');
            }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling replaceUserType.');
            }
            var localVarPath = "/api/v1/meta/types/user/{typeId}"
                .replace("{" + "typeId" + "}", encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var localVarUrlObj = new URL(localVarPath, 'https://example.com');
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                var localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            var query = new URLSearchParams(localVarUrlObj.search);
            for (var key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (var key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions
            };
        },
        /**
          * Updates an existing User Type
          * @summary Update User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        updateUserType: function (body, typeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateUserType.');
            }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling updateUserType.');
            }
            var localVarPath = "/api/v1/meta/types/user/{typeId}"
                .replace("{" + "typeId" + "}", encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var localVarUrlObj = new URL(localVarPath, 'https://example.com');
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                var localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            var query = new URLSearchParams(localVarUrlObj.search);
            for (var key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (var key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions
            };
        }
    };
};
exports.UserTypeApiRequestParamCreator = UserTypeApiRequestParamCreator;
/**
 * UserTypeApi - functional programming interface
 * @export
 */
var UserTypeApiFp = function (configuration) {
    return {
        /**
          * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
          * @summary Create User Type
          * @param {UserType} body
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        createUserType: function (body, options) {
            var api = exports.UserTypeApiRequestParamCreator(configuration);
            var localVarRequestArgs = api.createUserType(body, options);
            return function (http, basePath) {
                if (http === void 0) { http = api.http; }
                if (basePath === void 0) { basePath = configuration.basePath || configuration.orgUrl; }
                var requestArgs = __assign(__assign({}, localVarRequestArgs.options), { url: basePath + localVarRequestArgs.url });
                return http.http(requestArgs.url, requestArgs).then(function (res) { return res.json(); });
            };
        },
        /**
          * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
          * @summary Delete User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        deleteUserType: function (typeId, options) {
            var api = exports.UserTypeApiRequestParamCreator(configuration);
            var localVarRequestArgs = api.deleteUserType(typeId, options);
            return function (http, basePath) {
                if (http === void 0) { http = api.http; }
                if (basePath === void 0) { basePath = configuration.basePath || configuration.orgUrl; }
                var requestArgs = __assign(__assign({}, localVarRequestArgs.options), { url: basePath + localVarRequestArgs.url });
                return http.http(requestArgs.url, requestArgs);
            };
        },
        /**
          * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
          * @summary Get User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        getUserType: function (typeId, options) {
            var api = exports.UserTypeApiRequestParamCreator(configuration);
            var localVarRequestArgs = api.getUserType(typeId, options);
            return function (http, basePath) {
                if (http === void 0) { http = api.http; }
                if (basePath === void 0) { basePath = configuration.basePath || configuration.orgUrl; }
                var requestArgs = __assign(__assign({}, localVarRequestArgs.options), { url: basePath + localVarRequestArgs.url });
                return http.http(requestArgs.url, requestArgs).then(function (res) { return res.json(); });
            };
        },
        /**
          * Fetches all User Types in your org
          * @summary List User Types
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        listUserTypes: function (options) {
            var api = exports.UserTypeApiRequestParamCreator(configuration);
            var localVarRequestArgs = api.listUserTypes(options);
            return function (http, basePath) {
                if (http === void 0) { http = api.http; }
                if (basePath === void 0) { basePath = configuration.basePath || configuration.orgUrl; }
                var requestArgs = __assign(__assign({}, localVarRequestArgs.options), { url: basePath + localVarRequestArgs.url });
                return new collection_1.Collection({ http: http }, "" + requestArgs.url, new model_factory_1.ModelFactory(models_1.UserType));
            };
        },
        /**
          * Replace an existing User Type
          * @summary Replace User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        replaceUserType: function (body, typeId, options) {
            var api = exports.UserTypeApiRequestParamCreator(configuration);
            var localVarRequestArgs = api.replaceUserType(body, typeId, options);
            return function (http, basePath) {
                if (http === void 0) { http = api.http; }
                if (basePath === void 0) { basePath = configuration.basePath || configuration.orgUrl; }
                var requestArgs = __assign(__assign({}, localVarRequestArgs.options), { url: basePath + localVarRequestArgs.url });
                return http.http(requestArgs.url, requestArgs).then(function (res) { return res.json(); });
            };
        },
        /**
          * Updates an existing User Type
          * @summary Update User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        updateUserType: function (body, typeId, options) {
            var api = exports.UserTypeApiRequestParamCreator(configuration);
            var localVarRequestArgs = api.updateUserType(body, typeId, options);
            return function (http, basePath) {
                if (http === void 0) { http = api.http; }
                if (basePath === void 0) { basePath = configuration.basePath || configuration.orgUrl; }
                var requestArgs = __assign(__assign({}, localVarRequestArgs.options), { url: basePath + localVarRequestArgs.url });
                return http.http(requestArgs.url, requestArgs).then(function (res) { return res.json(); });
            };
        }
    };
};
exports.UserTypeApiFp = UserTypeApiFp;
/**
 * UserTypeApi - factory interface
 * @export
 */
var UserTypeApiFactory = function (configuration, basePath, http) {
    return {
        /**
          * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
          * @summary Create User Type
          * @param {UserType} body
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        createUserType: function (body, options) {
            return exports.UserTypeApiFp(configuration).createUserType(body, options)(http, basePath);
        },
        /**
          * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
          * @summary Delete User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        deleteUserType: function (typeId, options) {
            return exports.UserTypeApiFp(configuration).deleteUserType(typeId, options)(http, basePath);
        },
        /**
          * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
          * @summary Get User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        getUserType: function (typeId, options) {
            return exports.UserTypeApiFp(configuration).getUserType(typeId, options)(http, basePath);
        },
        /**
          * Fetches all User Types in your org
          * @summary List User Types
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        listUserTypes: function (options) {
            return exports.UserTypeApiFp(configuration).listUserTypes(options)(http, basePath);
        },
        /**
          * Replace an existing User Type
          * @summary Replace User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        replaceUserType: function (body, typeId, options) {
            return exports.UserTypeApiFp(configuration).replaceUserType(body, typeId, options)(http, basePath);
        },
        /**
          * Updates an existing User Type
          * @summary Update User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        updateUserType: function (body, typeId, options) {
            return exports.UserTypeApiFp(configuration).updateUserType(body, typeId, options)(http, basePath);
        }
    };
};
exports.UserTypeApiFactory = UserTypeApiFactory;
/**
 * UserTypeApi - object-oriented interface
 * @export
 * @class UserTypeApi
 * @extends {BaseAPI}
 */
var UserTypeApi = /** @class */ (function (_super) {
    __extends(UserTypeApi, _super);
    function UserTypeApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
      * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
      * @summary Create User Type
      * @param {UserType} body
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    UserTypeApi.prototype.createUserType = function (body, options) {
        return exports.UserTypeApiFp(this.configuration).createUserType(body, options)(this.httpClient, this.basePath);
    };
    /**
      * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
      * @summary Delete User Type
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    UserTypeApi.prototype.deleteUserType = function (typeId, options) {
        return exports.UserTypeApiFp(this.configuration).deleteUserType(typeId, options)(this.httpClient, this.basePath);
    };
    /**
      * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
      * @summary Get User Type
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    UserTypeApi.prototype.getUserType = function (typeId, options) {
        return exports.UserTypeApiFp(this.configuration).getUserType(typeId, options)(this.httpClient, this.basePath);
    };
    /**
      * Fetches all User Types in your org
      * @summary List User Types
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    UserTypeApi.prototype.listUserTypes = function (options) {
        return exports.UserTypeApiFp(this.configuration).listUserTypes(options)(this.httpClient, this.basePath);
    };
    /**
      * Replace an existing User Type
      * @summary Replace User Type
      * @param {UserType} body
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    UserTypeApi.prototype.replaceUserType = function (body, typeId, options) {
        return exports.UserTypeApiFp(this.configuration).replaceUserType(body, typeId, options)(this.httpClient, this.basePath);
    };
    /**
      * Updates an existing User Type
      * @summary Update User Type
      * @param {UserType} body
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    UserTypeApi.prototype.updateUserType = function (body, typeId, options) {
        return exports.UserTypeApiFp(this.configuration).updateUserType(body, typeId, options)(this.httpClient, this.basePath);
    };
    return UserTypeApi;
}(base_1.BaseAPI));
exports.UserTypeApi = UserTypeApi;
